name: Terraform

on:
  pull_request:

  workflow_dispatch: #this attribute will enable the manual run to the pipeline


permissions:
  contents: read
  pull-requests: write

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

env:
  TERRAFORM_VERSION: 1.3.0
  TERRAFORM_REGION: "us-east-1"
  INFRA_PATH: './infra'
  AWS_ACCESS_KEY_ID: "AKIATLUVZAGYXPLKILO3"

jobs:
  terraform-plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    env:
      WORKSPACE: "${{ github.base_ref == 'master' && 'prod' || 'develop' }}"

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.TERRAFORM_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform
      # CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Format Terraform files
        id: fmt
        run: |
          terraform fmt -recursive -check
        continue-on-error: true
        working-directory: ${{ env.INFRA_PATH }}

      - name: Init Terraform and setup workspace
        id: init
        run: |
          terraform init
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
        working-directory: ${{ env.INFRA_PATH }}

      - name: Validate Terraform files
        id: validate
        run: |
          terraform validate -no-color
        working-directory: ${{ env.INFRA_PATH }}

      - name: Plan Terraform
        id: plan
        if: github.event_name == 'pull_request'
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          TF_VAR_app: ${{ secrets.APP }}
        run: |
          terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.INFRA_PATH }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workspace: \`${{ env.WORKSPACE }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
