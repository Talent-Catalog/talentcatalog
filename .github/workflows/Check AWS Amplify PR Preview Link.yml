name: Check AWS Amplify PR Preview Link

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-preview-link:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Wait before proceeding
        run: |
          echo "Waiting for 1 minute and 30 seconds before checking the preview links..."
          sleep 90

      - name: Get Amplify preview URLs from comments
        id: get-preview-urls
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Filter comments from "aws-amplify" containing the preview link
            const amplifyComments = comments.filter(comment => 
              comment.user.login.startsWith("aws-amplify") &&
              comment.body.includes("Access this pull request here:")
            );

            if (amplifyComments.length === 0) {
              core.setFailed("No Amplify preview URLs found in comments.");
              return;
            }

            const urls = amplifyComments.map(comment => {
              const urlMatch = comment.body.match(/https?:\/\/[^\s]+/);
              return {
                url: urlMatch ? urlMatch[0] : null,
                id: comment.id
              };
            }).filter(item => item.url); // Remove null URLs

            if (urls.length === 0) {
              core.setFailed("No valid Amplify preview URLs found in comments.");
              return;
            }

            core.setOutput("urls", JSON.stringify(urls));

      - name: Check if preview links are reachable
        id: check-links
        run: |
          urls='${{ steps.get-preview-urls.outputs.urls }}'
          broken_urls=()
          echo "Checking each preview link for status..."

          for item in $(echo "$urls" | jq -c '.[]'); do
            url=$(echo "$item" | jq -r '.url')
            comment_id=$(echo "$item" | jq -r '.id')

            HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$url")
            
            if [ "$HTTP_STATUS" -ne "200" ]; then
              broken_urls+=("$comment_id")
            fi
          done

          echo "::set-output name=broken_ids::${broken_urls[@]}"

      - name: Delete or notify if any preview link is broken
        uses: actions/github-script@v6
        if: steps.check-links.outputs.broken_ids != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const brokenIds = "${{ steps.check-links.outputs.broken_ids }}".split(" ");
            const promises = brokenIds.map(commentId =>
              github.rest.issues.deleteComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: parseInt(commentId),
              })
            );

            await Promise.all(promises);
